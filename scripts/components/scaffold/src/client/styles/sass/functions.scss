/*****************
 * SASS FUNCTIONS
 *****************/
// pixels to rem converter
@function remy($px, $pxBase: 16) {
	@return ($px / $pxBase) + rem;
}

/* String Replace (recursively)
 *******************************/
@function strReplace($string, $search, $replace: '') {
	$index: str_index($string, $search);
	@if not $index { @return $string; }
	@return str_slice($string, 1, $index - 1) + $replace + strReplace(str-slice($string, $index + str-length($search)), $search, $replace);
}

/* Deep map-get
 * mapGet($styles, link, color)
 *******************************/
@function mapGet($map, $keys...) {
	$value: $map;
	@each $key in $keys {
		$value: map-get($value, $key);
	}
	@return $value;
}

/* Same as mapGet() but
 * doesn't throw if key not found.
 * Sometimes useful in @mixins.
 **********************************/
@function mapSafeGet($map, $keys...) {
	$value: $map;
	@each $key in $keys {
		@if not map-has-key($value, $key) {
			// @warn '"#{$key}" key not in map: #{$keys}';
			@return null;
		}
		$value: map-get($value, $key);
	}
	@return $value;
}

/* Merge Multiple Deep Maps
 * mergeMaps($map1, $map2, $map3)
 * Sass map-merge() is limited to 2 maps and not deep.
 ******************************************************/
@function mergeMaps($maps...) {
	$map: ();
	$tot: length($maps);
	@for $i from 1 through $tot {
		$current: nth($maps, $i);
		@each $key, $value in $current {
			// if value is a nested map and same key from map is a nested map as well
			@if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
				$value: mergeMaps(map-get($map, $key), $value); // recursive extend
			}
			$map: map-merge($map, ($key: $value)); // merge current into map
		}
	}
	@return $map;
}

/* Map Set Prop (supports deep)
 * mapSet(
 *   $map to update,
 *   $keys to value,
 *   $new value
 * ) returns updated map
 *************************************/
@function mapSetProp($map, $keys.../*, $value */) {
	$map-list: ($map,);
	$result: null;
	@if length($keys) == 2 {
		@return map-merge($map, (nth($keys, 1): nth($keys, -1)));
	}
	@for $i from 1 through length($keys) - 2 {
		$map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
	}
	@for $i from length($map-list) through 1 {
		$result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
	}
	@return $result;
}

/* Get Css Vars Map (technique for theming)
 * Example:
	$prefix: '--rb-nav-';
	$darkSuffix: '-dark';
	$vars: (
		common: getCssVarsMap($commonCssVars, $prefix),
		light:  getCssVarsMap($lightCssVars, $prefix),
		dark:   getCssVarsMap($darkCssVars, $prefix, $darkSuffix)
	);
 *****************************************************************/
@function getCssVarsMap($cssVarsMap, $varPrefix: null, $varSuffix: null) {
	$varPrefix: if($varPrefix, $varPrefix, '--');
	$map: ();
	@each $key, $val in $cssVarsMap {
		$val: var(#{$varPrefix}#{$key}#{$varSuffix}, $val) !important;
		$map: map-merge($map, ($key: $val));
	}
	@return $map;
}